require('dotenv').config();
const { Telegraf } = require('telegraf');
const mongoose = require('mongoose');
const User = require('./models/User');

mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => console.error('‚ùå MongoDB error', err));

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

bot.start(async (ctx) => {
  try {
    const { id, username, first_name, last_name } = ctx.from;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, username –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–µ null)
    const updateData = {
      telegramId: id,
      telegramData: { username, first_name, last_name },
      lastActivity: new Date()
    };
    if (username) {
      updateData.username = username;
    }

    const user = await User.findOneAndUpdate(
      { telegramId: id },
      updateData,
      { upsert: true, new: true, setDefaultsOnInsert: true }
    );

    await ctx.replyWithHTML(
      `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!</b>\n\n` +
      `–í–∞—à –±–∞–ª–∞–Ω—Å:\n` +
      `SOL: ${user.solBalance.toFixed(4)}\n` +
      `USDT: ${user.usdtBalance.toFixed(2)}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üí∞ –û—Ç–∫—Ä—ã—Ç—å –æ–±–º–µ–Ω–Ω–∏–∫',
                web_app: { url: 'https://solobmen.onrender.com/' }
              }
            ],
            [
              { text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'balance' }
            ]
          ]
        }
      }
    );
  } catch (err) {
    console.error('Telegram error:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
});

bot.on('callback_query', async (ctx) => {
  try {
    await ctx.answerCbQuery();

    if (ctx.callbackQuery.data === 'balance') {
      const user = await User.findOne({ telegramId: ctx.from.id });
      if (user) {
        await ctx.replyWithHTML(
          `üìä –ë–∞–ª–∞–Ω—Å:\n` +
          `SOL: <b>${user.solBalance.toFixed(4)}</b>\n` +
          `USDT: <b>${user.usdtBalance.toFixed(2)}</b>\n\n` +
          `üí≥ –ê–¥—Ä–µ—Å –¥–µ–ø–æ–∑–∏—Ç–∞:\n<code>${user.depositAddress}</code>`
        );
      } else {
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', err);
  }
});

bot.on('web_app_data', (ctx) => {
  try {
    const data = JSON.parse(ctx.webAppData.data);
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp:', data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ web_app_data:', err);
  }
});

bot.catch((err) => console.error('Bot error:', err));

bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
