require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const User = require('./models/User');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// /start ‚Äî —Å–æ–∑–¥–∞—ë—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É WebApp
bot.start(async (ctx) => {
  try {
    const { id, username, first_name, last_name } = ctx.from;

    const user = await User.findOneAndUpdate(
      { telegramId: id },
      {
        telegramId: id,
        telegramData: { username, first_name, last_name },
        lastActivity: new Date()
      },
      { upsert: true, new: true, setDefaultsOnInsert: true }
    );

    await ctx.replyWithHTML(
      `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!</b>\n\n` +
      `–í–∞—à –±–∞–ª–∞–Ω—Å:\n` +
      `SOL: ${user.solBalance.toFixed(4)}\n` +
      `USDT: ${user.usdtBalance.toFixed(2)}`,
      Markup.keyboard([
        Markup.button.webApp('üí∞ –û–±–º–µ–Ω–Ω–∏–∫', 'https://solobmen.onrender.com'),
        Markup.button.text('üìä –ë–∞–ª–∞–Ω—Å')
      ]).resize()
    );
  } catch (error) {
    console.error('Telegram bot error:', error);
    ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
bot.hears('üìä –ë–∞–ª–∞–Ω—Å', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  if (user) {
    await ctx.replyWithHTML(
      `–í–∞—à –±–∞–ª–∞–Ω—Å:\n` +
      `SOL: <b>${user.solBalance.toFixed(4)}</b>\n` +
      `USDT: <b>${user.usdtBalance.toFixed(2)}</b>\n\n` +
      `–î–µ–ø–æ–∑–∏—Ç–Ω—ã–π –∞–¥—Ä–µ—Å:\n<code>${user.depositAddress}</code>`
    );
  } else {
    ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
bot.on('web_app_data', async (ctx) => {
  try {
    // ctx.webAppData.data ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON
    const data = JSON.parse(ctx.webAppData.data);

    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp:', data);

    // –ú–æ–∂–Ω–æ –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data:', e);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp.');
  }
});

bot.catch(err => console.error('Bot error:', err));

bot.launch()
  .then(() => console.log('ü§ñ Telegram bot started'))
  .catch(err => console.error('‚ùå Bot error:', err));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
