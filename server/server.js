require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const path = require('path');
const cors = require('cors');
const { Telegraf, Markup } = require('telegraf');
const User = require('./models/User');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware setup
app.use(cors({
  origin: ['http://localhost:3000', 'https://solobmen.onrender.com'],
  methods: ['GET', 'POST', 'OPTIONS'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '../public')));

// View engine setup
app.set('views', path.join(__dirname, '../views'));
app.set('view engine', 'ejs');

// Routes
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'healthy',
    timestamp: new Date(),
    dbStatus: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected'
  });
});

app.get('/', (req, res) => {
  res.render('index', {
    apiBaseUrl: process.env.API_BASE_URL || 'https://solobmen.onrender.com'
  });
});

app.use((req, res) => {
  res.status(404).json({ error: 'Not Found' });
});

// MongoDB connection
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log('‚úÖ Connected to MongoDB');

  const server = app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
  });

  // Initialize Telegram bot
  const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

  // ======================
  // MESSAGE CONTENT
  // ======================

  const content = {
    welcome: {
      en: (name) => `üéâ *Welcome to Solana Exchange, ${name || 'user'}!* üéâ\n\nüöÄ *Why choose us?*\n‚Ä¢ Best exchange rates\n‚Ä¢ 0% commission\n‚Ä¢ Instant transactions\n‚Ä¢ Secure since 2019\n\nüí± *Minimum deposits:*\n0.05 SOL or 5 USDT`,
      ru: (name) => `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Solana Exchange, ${name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!* üéâ\n\nüöÄ *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?*\n‚Ä¢ –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã\n‚Ä¢ 0% –∫–æ–º–∏—Å—Å–∏–∏\n‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ —Å 2019\n\nüí± *–ú–∏–Ω–∏–º—É–º—ã:*\n0.05 SOL –∏–ª–∏ 5 USDT`
    },
    policy: {
      en: `üîí *Our Privacy Policy*\n\n‚Ä¢ Only Solana blockchain\n‚Ä¢ No key storage\n‚Ä¢ Smart contracts\n‚Ä¢ Security audits`,
      ru: `üîí *–ù–∞—à–∞ –ü–æ–ª–∏—Ç–∏–∫–∞*\n\n‚Ä¢ –¢–æ–ª—å–∫–æ Solana\n‚Ä¢ –ù–µ —Ö—Ä–∞–Ω–∏–º –∫–ª—é—á–∏\n‚Ä¢ –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã\n‚Ä¢ –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏`
    },
    howWeWork: {
      en: `üõ† *How We Work*\n\n‚Ä¢ Since 2019\n‚Ä¢ 50k+ users\n‚Ä¢ $10M+ processed\n‚Ä¢ 24/7 support`,
      ru: `üõ† *–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º*\n\n‚Ä¢ –° 2019 –≥–æ–¥–∞\n‚Ä¢ 50k+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ $10M+ –æ–ø–µ—Ä–∞—Ü–∏–π\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7`
    },
    faq: {
      en: `‚ùì *FAQ*\n\n*Q: Advantage?*\nA: Best rates, 0% fee\n\n*Q: Minimum?*\nA: 5 USDT/0.05 SOL`,
      ru: `‚ùì *–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n*–í: –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?*\n–û: –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã, 0% –∫–æ–º–∏—Å—Å–∏–π\n\n*–í: –ú–∏–Ω–∏–º—É–º?*\n–û: 5 USDT/0.05 SOL`
    }
  };

  // ======================
  // BOT HANDLERS
  // ======================

  // Start command
  bot.start(async (ctx) => {
    try {
      const { id } = ctx.from;
      await User.findOneAndUpdate(
        { telegramId: id },
        { telegramId: id, lastActivity: new Date() },
        { upsert: true, new: true }
      );
      await sendLanguageSelection(ctx);
    } catch (err) {
      console.error('Start error:', err);
      ctx.reply('‚ö†Ô∏è Error occurred. Please try again.');
    }
  });

  // Language selection
  const sendLanguageSelection = async (ctx) => {
    try {
      await ctx.reply('üåç Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', {
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('English üá¨üáß', 'SET_LANG_EN')],
          [Markup.button.callback('–†—É—Å—Å–∫–∏–π üá∑üá∫', 'SET_LANG_RU')]
        ])
      });
    } catch (err) {
      console.error('Language selection error:', err);
    }
  };

  // Language handlers
  bot.action('SET_LANG_EN', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      await User.updateOne({ telegramId: ctx.from.id }, { language: 'en' });
      await showMainMenu(ctx, 'en');
    } catch (err) {
      console.error('EN language error:', err);
    }
  });

  bot.action('SET_LANG_RU', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      await User.updateOne({ telegramId: ctx.from.id }, { language: 'ru' });
      await showMainMenu(ctx, 'ru');
    } catch (err) {
      console.error('RU language error:', err);
    }
  });

  // Main menu
  const showMainMenu = async (ctx, lang) => {
    try {
      const user = await User.findOne({ telegramId: ctx.from.id });
      const name = ctx.from.first_name;

      // Safe message deletion
      try {
        if (ctx.callbackQuery?.message) {
          await ctx.deleteMessage();
        }
      } catch (e) {
        console.log('Message deletion skipped:', e.message);
      }

      // Try with photo first
      try {
        await ctx.replyWithPhoto(
          { url: 'https://quark.house/wp-content/uploads/2024/11/solana-1024x576.jpg' },
          {
            caption: content.welcome[lang](name),
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.webApp(
                'üí∞ ' + (lang === 'en' ? 'Exchange' : '–û–±–º–µ–Ω–Ω–∏–∫'), 
                'https://solobmen.onrender.com'
              )],
              [
                Markup.button.callback('üîí ' + (lang === 'en' ? 'Policy' : '–ü–æ–ª–∏—Ç–∏–∫–∞'), 'SHOW_POLICY'),
                Markup.button.callback('üõ† ' + (lang === 'en' ? 'How We Work' : '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º'), 'SHOW_HOW')
              ],
              [Markup.button.callback('‚ùì FAQ', 'SHOW_FAQ')]
            ])
          }
        );
        return;
      } catch (photoError) {
        console.log('Photo send failed, falling back to text:', photoError);
      }

      // Fallback to text message
      await ctx.reply(
        content.welcome[lang](name),
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [Markup.button.webApp(
                'üí∞ ' + (lang === 'en' ? 'Exchange' : '–û–±–º–µ–Ω–Ω–∏–∫'), 
                'https://solobmen.onrender.com'
              )],
              [
                Markup.button.callback('üîí ' + (lang === 'en' ? 'Policy' : '–ü–æ–ª–∏—Ç–∏–∫–∞'), 'SHOW_POLICY'),
                Markup.button.callback('üõ† ' + (lang === 'en' ? 'How We Work' : '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º'), 'SHOW_HOW')
              ],
              [Markup.button.callback('‚ùì FAQ', 'SHOW_FAQ')]
            ]
          }
        }
      );
    } catch (err) {
      console.error('Main menu error:', err);
    }
  };

  // Info sections
  const showInfoSection = async (ctx, section) => {
    try {
      await ctx.answerCbQuery();
      const user = await User.findOne({ telegramId: ctx.from.id });
      const lang = user?.language || 'en';
      
      await ctx.replyWithMarkdown(
        content[section][lang],
        Markup.inlineKeyboard([
          [Markup.button.callback(
            '‚Üê ' + (lang === 'en' ? 'Back' : '–ù–∞–∑–∞–¥'), 
            'BACK_TO_MAIN'
          )]
        ])
      );
    } catch (err) {
      console.error(`${section} error:`, err);
    }
  };

  bot.action('SHOW_POLICY', (ctx) => showInfoSection(ctx, 'policy'));
  bot.action('SHOW_HOW', (ctx) => showInfoSection(ctx, 'howWeWork'));
  bot.action('SHOW_FAQ', (ctx) => showInfoSection(ctx, 'faq'));

  // Back to main
  bot.action('BACK_TO_MAIN', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const user = await User.findOne({ telegramId: ctx.from.id });
      const lang = user?.language || 'en';
      
      try {
        await ctx.deleteMessage();
      } catch (e) {
        console.log('Back message deletion skipped:', e.message);
      }
      
      await showMainMenu(ctx, lang);
    } catch (err) {
      console.error('Back error:', err);
    }
  });

  // WebApp handler
  bot.on('web_app_data', async (ctx) => {
    try {
      const data = JSON.parse(ctx.webAppData.data);
      console.log('WebApp data:', data);
      const user = await User.findOne({ telegramId: ctx.from.id });
      const lang = user?.language || 'en';
      
      await ctx.reply(
        lang === 'en' 
          ? '‚úÖ Transaction received! Processing...' 
          : '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∫–∞...'
      );
    } catch (err) {
      console.error('WebApp error:', err);
    }
  });

  // Error handling
  bot.catch((err) => {
    console.error('Bot error:', err);
  });

  // Bot launch
  const launchBot = async () => {
    if (process.env.NODE_ENV === 'production') {
      // Webhook configuration
      const domain = process.env.WEBHOOK_DOMAIN || `https://solobmen.onrender.com`;
      const hookPath = `/bot${process.env.TELEGRAM_BOT_TOKEN}`;
      
      console.log(`üåê Webhook configured at ${domain}${hookPath}`);
      
      await bot.launch({
        webhook: {
          domain: domain,
          port: PORT,
          hookPath: hookPath
        }
      });
    } else {
      // Polling in development
      await bot.launch();
      console.log('üîé Bot polling for updates');
    }
    console.log('ü§ñ Bot started successfully');
  };

  launchBot().catch(err => {
    console.error('‚ùå Bot launch failed:', err);
    process.exit(1);
  });

  // Graceful shutdown
  const shutdown = () => {
    bot.stop();
    server.close();
    process.exit(0);
  };

  process.once('SIGINT', shutdown);
  process.once('SIGTERM', shutdown);
})
.catch(err => {
  console.error('‚ùå MongoDB connection failed:', err);
  process.exit(1);
});