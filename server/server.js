require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const path = require('path');
const cors = require('cors');
const { Telegraf, Markup } = require('telegraf');
const User = require('./models/User');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors({
  origin: ['http://localhost:3000', 'https://solobmen.onrender.com'],
  methods: ['GET', 'POST', 'OPTIONS'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '../public')));

app.set('views', path.join(__dirname, '../views'));
app.set('view engine', 'ejs');

app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'healthy',
    timestamp: new Date(),
    dbStatus: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected'
  });
});

app.get('/', (req, res) => {
  res.render('index', {
    apiBaseUrl: process.env.API_BASE_URL || 'https://solobmen.onrender.com'
  });
});

app.use((req, res) => {
  res.status(404).json({ error: 'Not Found' });
});

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log('‚úÖ Connected to MongoDB');

  const server = app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
  });

  const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

  // Language selection handler
  const sendLanguageSelection = async (ctx) => {
    try {
      await ctx.reply('üåç Please choose your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', {
        reply_markup: {
          inline_keyboard: [
            [
              Markup.button.callback('English üá¨üáß', 'SET_LANG_EN'),
              Markup.button.callback('–†—É—Å—Å–∫–∏–π üá∑üá∫', 'SET_LANG_RU')
            ]
          ]
        }
      });
    } catch (err) {
      console.error('Language selection error:', err);
    }
  };

  // Welcome messages in both languages
  const welcomeMessages = {
    en: (name) => `
üéâ *Welcome to Solana Exchange, ${name || 'user'}!* üéâ

üöÄ *Why choose us?*
‚Ä¢ Best exchange rates for SOL/USDT
‚Ä¢ 0% commission on all trades
‚Ä¢ Instant transactions on Solana network
‚Ä¢ Secure and reliable service since 2019

üí± *Minimum deposits:*
Minimum deposit 0.05 SOL
Minimum deposit 5 USDT

We recommend checking our Policy before trading. Happy exchanging! üí∞
    `,
    ru: (name) => `
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Solana Exchange, ${name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!* üéâ

üöÄ *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?*
‚Ä¢ –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ SOL/USDT
‚Ä¢ 0% –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ç–∏ Solana
‚Ä¢ –ù–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å 2019 –≥–æ–¥–∞

üí± *–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã:*
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç 0.05 SOL
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç 5 USDT

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –ø–µ—Ä–µ–¥ –æ–±–º–µ–Ω–æ–º. –£–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π! üí∞
    `
  };

  // Policy messages
  const policyMessages = {
    en: `
üîí *Our Privacy Policy & Security*

At Solana Exchange, we prioritize your security:

‚Ä¢ We operate exclusively on Solana blockchain (SPL tokens)
‚Ä¢ We never store your private keys or sensitive data
‚Ä¢ All transactions are processed through smart contracts
‚Ä¢ We comply with international crypto regulations

Your funds are protected by:
- Multi-signature wallets
- Cold storage for 95% of assets
- Regular security audits
    `,
    ru: `
üîí *–ù–∞—à–∞ –ü–æ–ª–∏—Ç–∏–∫–∞ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏*

–í Solana Exchange –≤–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:

‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Å–µ—Ç–∏ Solana (SPL-—Ç–æ–∫–µ–Ω—ã)
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
‚Ä¢ –°–æ–±–ª—é–¥–∞–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ-—Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã

–í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã:
- –ú—É–ª—å—Ç–∏–ø–æ–¥–ø–∏—Å–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
- –•–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ 95% –∞–∫—Ç–∏–≤–æ–≤
- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∞—É–¥–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    `
  };

  // How we work messages
  const howWeWorkMessages = {
    en: `
üõ† *How We Work & Our Story*

Founded in 2019, we migrated to Telegram to provide better service:

‚Ä¢ 2019: Started as SolSwap on Google Sites
‚Ä¢ 2021: Launched mobile app with 50k+ users
‚Ä¢ 2023: Fully transitioned to Telegram bots
‚Ä¢ 2024: Processed $10M+ in trades

Our advantages:
‚úÖ 24/7 customer support
‚úÖ Best rates from 10+ liquidity providers
‚úÖ Non-custodial exchange model
‚úÖ Regular market analysis updates
    `,
    ru: `
üõ† *–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –∏ –Ω–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è*

–û—Å–Ω–æ–≤–∞–Ω—ã –≤ 2019, –ø–µ—Ä–µ—à–ª–∏ –≤ Telegram –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:

‚Ä¢ 2019: –ù–∞—á–∞–ª–∏ –∫–∞–∫ SolSwap –Ω–∞ Google Sites
‚Ä¢ 2021: –ó–∞–ø—É—Å—Ç–∏–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (50k+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
‚Ä¢ 2023: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ Telegram-–±–æ—Ç–æ–≤
‚Ä¢ 2024: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ $10M+ –æ–ø–µ—Ä–∞—Ü–∏–π

–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚úÖ –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã –æ—Ç 10+ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
‚úÖ –ù–µ–∫–∞—Å—Ç–æ–¥–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ–±–º–µ–Ω–∞
‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞
    `
  };

  // FAQ messages
  const faqMessages = {
    en: `
‚ùì *Frequently Asked Questions*

*Q: What's your advantage over competitors?*
A: We aggregate rates from multiple exchanges and pass savings to you with 0% commission.

*Q: How long have you been operating?*
A: Since 2019 (over 4 years) across web and mobile platforms.

*Q: Is there a minimum exchange amount?*
A: Yes, 5 USDT or 0.05 SOL for all transactions.

*Q: How fast are transactions?*
A: Typically under 50+ seconds on Solana network.

*Q: Do you support other cryptocurrencies?*
A: Currently only SOL and USDT (SPL tokens).
    `,
    ru: `
‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*

*–í: –ö–∞–∫–æ–µ –≤–∞—à–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏?*
–û: –ú—ã –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∫—É—Ä—Å—ã —Å –±–∏—Ä–∂ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π.

*–í: –ö–∞–∫ –¥–æ–ª–≥–æ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?*
–û: –° 2019 –≥–æ–¥–∞ (–±–æ–ª–µ–µ 4 –ª–µ—Ç) –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.

*–í: –ï—Å—Ç—å –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞?*
–û: –î–∞, –æ—Ç 5 USDT –∏–ª–∏ 0.05 SOL –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

*–í: –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?*
–û: –û–±—ã—á–Ω–æ –¥–æ 50 —Å–µ–∫—É–Ω–¥ –≤ —Å–µ—Ç–∏ Solana.

*–í: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã?*
–û: –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ SOL –∏ USDT (SPL-—Ç–æ–∫–µ–Ω—ã).
    `
  };

  // Start command handler
  bot.start(async (ctx) => {
    try {
      const { id } = ctx.from;
      
      // Initialize user without language
      await User.findOneAndUpdate(
        { telegramId: id },
        { telegramId: id, lastActivity: new Date() },
        { upsert: true, new: true, setDefaultsOnInsert: true }
      );

      await sendLanguageSelection(ctx);
    } catch (err) {
      console.error('Start command error:', err);
      ctx.reply('‚ö†Ô∏è An error occurred. Please try again later.');
    }
  });

  // Language selection handlers
  bot.action('SET_LANG_EN', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      await User.updateOne({ telegramId: ctx.from.id }, { language: 'en' });
      await showMainMenu(ctx, 'en');
    } catch (err) {
      console.error('Set EN language error:', err);
    }
  });

  bot.action('SET_LANG_RU', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      await User.updateOne({ telegramId: ctx.from.id }, { language: 'ru' });
      await showMainMenu(ctx, 'ru');
    } catch (err) {
      console.error('Set RU language error:', err);
    }
  });

  // Show main menu with selected language
  const showMainMenu = async (ctx, lang) => {
    try {
      const user = await User.findOne({ telegramId: ctx.from.id });
      const name = ctx.from.first_name;
      
      // Try to delete previous message if it exists
      try {
        if (ctx.callbackQuery?.message?.message_id) {
          await ctx.deleteMessage();
        }
      } catch (deleteError) {
        console.log('Could not delete previous message, continuing...');
      }
      
      await ctx.replyWithPhoto(
        { url: 'https://quark.house/wp-content/uploads/2024/11/solana-1024x576.jpg' },
        {
          caption: welcomeMessages[lang](name),
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                Markup.button.webApp('üí∞ ' + (lang === 'en' ? 'Open Exchange' : '–û—Ç–∫—Ä—ã—Ç—å –û–±–º–µ–Ω–Ω–∏–∫'), 
                'https://solobmen.onrender.com'),
              ],
              [
                Markup.button.callback('üîí ' + (lang === 'en' ? 'Policy' : '–ü–æ–ª–∏—Ç–∏–∫–∞'), 'SHOW_POLICY'),
                Markup.button.callback('üõ† ' + (lang === 'en' ? 'How We Work' : '–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º'), 'SHOW_HOW')
              ],
              [
                Markup.button.callback('‚ùì FAQ', 'SHOW_FAQ')
              ]
            ]
          }
        }
      );
    } catch (err) {
      console.error('Show main menu error:', err);
      // Fallback to simple message if photo fails
      const user = await User.findOne({ telegramId: ctx.from.id });
      const lang = user?.language || 'en';
      await ctx.reply(welcomeMessages[lang](ctx.from.first_name), {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [
            Markup.button.webApp('üí∞ ' + (lang === 'en' ? 'Open Exchange' : '–û—Ç–∫—Ä—ã—Ç—å –û–±–º–µ–Ω–Ω–∏–∫'), 
              'https://solobmen.onrender.com'),
          ],
          [
            Markup.button.callback('üîí ' + (lang === 'en' ? 'Policy' : '–ü–æ–ª–∏—Ç–∏–∫–∞'), 'SHOW_POLICY'),
            Markup.button.callback('üõ† ' + (lang === 'en' ? 'How We Work' : '–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º'), 'SHOW_HOW')
          ],
          [
            Markup.button.callback('‚ùì FAQ', 'SHOW_FAQ')
          ]
        ])
      });
    }
  };

  // Policy callback
  bot.action('SHOW_POLICY', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const user = await User.findOne({ telegramId: ctx.from.id });
      const lang = user?.language || 'en';
      
      await ctx.replyWithMarkdown(policyMessages[lang], Markup.inlineKeyboard([
        [Markup.button.callback('‚Üê ' + (lang === 'en' ? 'Back to Main Menu' : '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'), 'BACK_TO_MAIN')]
      ]));
    } catch (err) {
      console.error('Policy error:', err);
    }
  });

  // How we work callback
  bot.action('SHOW_HOW', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const user = await User.findOne({ telegramId: ctx.from.id });
      const lang = user?.language || 'en';
      
      await ctx.replyWithMarkdown(howWeWorkMessages[lang], Markup.inlineKeyboard([
        [Markup.button.callback('‚Üê ' + (lang === 'en' ? 'Back to Main Menu' : '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'), 'BACK_TO_MAIN')]
      ]));
    } catch (err) {
      console.error('How we work error:', err);
    }
  });

  // FAQ callback
  bot.action('SHOW_FAQ', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const user = await User.findOne({ telegramId: ctx.from.id });
      const lang = user?.language || 'en';
      
      await ctx.replyWithMarkdown(faqMessages[lang], Markup.inlineKeyboard([
        [Markup.button.callback('‚Üê ' + (lang === 'en' ? 'Back to Main Menu' : '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'), 'BACK_TO_MAIN')]
      ]));
    } catch (err) {
      console.error('FAQ error:', err);
    }
  });

  // Back to main menu
  bot.action('BACK_TO_MAIN', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const user = await User.findOne({ telegramId: ctx.from.id });
      const lang = user?.language || 'en';
      
      try {
        await ctx.deleteMessage();
      } catch (deleteError) {
        console.log('Could not delete message, continuing...');
      }
      await showMainMenu(ctx, lang);
    } catch (err) {
      console.error('Back to main error:', err);
    }
  });

  // WebApp data handler
  bot.on('web_app_data', async (ctx) => {
    try {
      const data = JSON.parse(ctx.webAppData.data);
      console.log('WebApp data received:', data);
      const user = await User.findOne({ telegramId: ctx.from.id });
      const lang = user?.language || 'en';
      
      await ctx.reply(lang === 'en' 
        ? '‚úÖ Transaction data received! Processing your exchange...' 
        : '‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –æ–±–º–µ–Ω...');
    } catch (err) {
      console.error('WebApp error:', err);
    }
  });

  // Error handling
  bot.catch((err) => {
    console.error('Bot error:', err);
  });

  // Launch bot with webhook for production
  if (process.env.NODE_ENV === 'production') {
    bot.launch({
      webhook: {
        domain: process.env.WEBHOOK_DOMAIN,
        port: PORT
      }
    }).then(() => {
      console.log('ü§ñ Bot running in production mode with webhook');
    });
  } else {
    bot.launch().then(() => {
      console.log('ü§ñ Bot running in development mode with polling');
    });
  }

  // Graceful shutdown
  process.once('SIGINT', () => {
    bot.stop('SIGINT');
    server.close();
  });
  process.once('SIGTERM', () => {
    bot.stop('SIGTERM');
    server.close();
  });
})
.catch(err => {
  console.error('‚ùå MongoDB connection error:', err);
});