require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const path = require('path');
const cors = require('cors');

const { Telegraf, Markup } = require('telegraf');
const User = require('./models/User'); // –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ User

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware –∏ —Å—Ç–∞—Ç–∏–∫–∞
app.use(cors({
  origin: ['http://localhost:3000', 'https://solobmen.onrender.com'], 
  methods: ['GET', 'POST', 'OPTIONS'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '../public')));

app.set('views', path.join(__dirname, '../views'));
app.set('view engine', 'ejs');

// –†–æ—É—Ç—ã
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'healthy',
    timestamp: new Date(),
    dbStatus: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected'
  });
});

app.get('/', (req, res) => {
  res.render('index', { 
    apiBaseUrl: process.env.API_BASE_URL || 'https://solobmen.onrender.com'
  });
});

app.use((req, res) => {
  res.status(404).json({ error: 'Not Found' });
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log('‚úÖ Connected to MongoDB');

  // –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
  app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
  const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

  // –ü—Ä–∏–º–µ—Ä: –∫–æ–º–∞–Ω–¥–∞ /start
  bot.start(async (ctx) => {
    try {
      const { id, username, first_name, last_name } = ctx.from;

      const user = await User.findOneAndUpdate(
        { telegramId: id },
        {
          telegramId: id,
          telegramData: { username, first_name, last_name },
          lastActivity: new Date()
        },
        { upsert: true, new: true, setDefaultsOnInsert: true }
      );

      await ctx.replyWithHTML(
        `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!</b>\n\n` +
        `–í–∞—à –±–∞–ª–∞–Ω—Å:\n` +
        `SOL: ${user.solBalance.toFixed(4)}\n` +
        `USDT: ${user.usdtBalance.toFixed(2)}`,
        Markup.keyboard([
          Markup.button.webApp('üí∞ –û–±–º–µ–Ω–Ω–∏–∫', 'https://solobmen.onrender.com'),
          Markup.button.text('üìä –ë–∞–ª–∞–Ω—Å')
        ]).resize()
      );
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ /start –±–æ—Ç–∞:', err);
      ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –ü—Ä–∏–º–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ "üìä –ë–∞–ª–∞–Ω—Å"
  bot.hears('üìä –ë–∞–ª–∞–Ω—Å', async (ctx) => {
    try {
      const user = await User.findOne({ telegramId: ctx.from.id });
      if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

      ctx.replyWithHTML(
        `–í–∞—à –±–∞–ª–∞–Ω—Å:\n` +
        `SOL: <b>${user.solBalance.toFixed(4)}</b>\n` +
        `USDT: <b>${user.usdtBalance.toFixed(2)}</b>\n\n` +
        `–î–µ–ø–æ–∑–∏—Ç–Ω—ã–π –∞–¥—Ä–µ—Å:\n<code>${user.depositAddress}</code>`
      );
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±–∞–ª–∞–Ω—Å–∞:', err);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
  bot.on('web_app_data', async (ctx) => {
    try {
      const data = JSON.parse(ctx.webAppData.data);
      // –¢—É—Ç –º–æ–∂–µ—à—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ WebApp
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp:', data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data:', err);
    }
  });

  bot.catch((err) => {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  });

  bot.launch();

  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
})
.catch(err => {
  console.error('‚ùå MongoDB connection error:', err);
});
